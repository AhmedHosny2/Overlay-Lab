@page
@model Portal.Pages.IDEToDockerModel
@{
    Layout = null; // Set to null to use this page without a layout. Remove if using a shared layout.
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Container Terminal</title>
    <!-- Monaco Editor CSS -->
    <link rel="stylesheet"
        href="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.22.3/min/vs/editor/editor.main.min.css"
        integrity="sha512-..." crossorigin="anonymous" referrerpolicy="no-referrer" />
    <!-- Google Font for better aesthetics -->
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Mono&display=swap" rel="stylesheet">
    <style>
        body {
            background-color: #1e1e1e;
            color: #cccccc;
            font-family: 'Roboto Mono', monospace;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .terminal-container {
            width: 90%;
            max-width: 800px;
            background-color: #2d2d2d;
            border-radius: 8px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
            padding: 20px;
            display: flex;
            flex-direction: column;
            height: 90vh;
        }

        .terminal-output {
            background-color: #1e1e1e;
            color: #00ff00;
            padding: 15px;
            border-radius: 4px;
            overflow-y: auto;
            flex-grow: 1;
            margin-bottom: 10px;
            white-space: pre-wrap;
            font-size: 14px;
        }

        .editor-container {
            height: 50px;
            border: 1px solid #444;
            border-radius: 4px;
        }

        /* Blinking cursor */
        .cursor {
            display: inline-block;
            width: 10px;
            background-color: #00ff00;
            animation: blink 1s step-start infinite;
            vertical-align: bottom;
        }

        .deploy-btn {
            position: absolute;
            top: 10px;
            left: 10px;
            background-color: #007bff;
            color: #fff;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
        }

        /* Escaped  for keyframes */
        @@keyframes blink {
            50% {
                background-color: transparent;
            }
        }
    </style>
</head>

<body>
    @* back button on top left goes to the home page *@
    <button class="deploy-btn" onclick="window.location.href='/'">Back</button>
    <p>@Model.CommandOutput</p>
    <div class="terminal-container">
        <div id="terminalOutput" class="terminal-output">
            <!-- Existing Output will be appended here -->
            @if (!string.IsNullOrEmpty(Model.CommandOutput))
            {
                @Html.Raw(Html.Encode(Model.CommandOutput).Replace("\n", "<br />"))
            }
        </div>
        <div class="editor-container" id="editor"></div>
    </div>

    <!-- Monaco Editor Script -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.22.3/min/vs/loader.js" integrity="sha512-..."
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
        // Function to get Anti-Forgery Token from the hidden form
        function getAntiForgeryToken() {
            const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
            return tokenElement ? tokenElement.value : '';
        }

        require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.22.3/min/vs' } });
        require(['vs/editor/editor.main'], function () {
            var editor = monaco.editor.create(document.getElementById('editor'), {
                value: '',
                language: 'shell',
                theme: 'vs-dark',
                automaticLayout: true,
                minimap: { enabled: false },
                fontSize: 14,
                lineNumbers: 'off',
                scrollbar: { vertical: 'hidden', horizontal: 'hidden' },
                wordWrap: 'on'
            });

            // Focus the editor on load
            editor.focus();

            // Handle Enter key for command submission
            editor.addCommand(monaco.KeyCode.Enter, function () {
                var command = editor.getValue().trim();
                if (command === "") return;
                if (command.trim() === "clear") {
                    document.getElementById('terminalOutput').innerHTML = '';
                    editor.setValue('');
                    return;
                }
                if (command.trim() === "exit") {
                    window.location.href = '/';
                    return;
                }

                if (command.trim() === "help") {
                    appendToTerminal("Commands:\n");
                    appendToTerminal("clear - Clear the terminal\n");
                    appendToTerminal("exit - Go back to the home page\n");
                    appendToTerminal("help - Display this help message\n");
                    return;
                }
                // Append the command to the terminal output
                appendToTerminal(`$ ${command}`);
                // append new line
                appendToTerminal("\n\n");

                // Clear the editor
                editor.setValue('');

                // Prepare form data
                const formData = new URLSearchParams();
                formData.append("CommandInput", command);
                formData.append("__RequestVerificationToken", getAntiForgeryToken());

                // Send the command to the server via AJAX
                fetch('@Url.Page("IDEToDocker", "ExecuteCommand")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: formData.toString()
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            appendToTerminal(data.output + "\n====================\n");
                        } else {
                            appendToTerminal(`Error: ${data.error}`);
                        }
                    })
                    .catch(error => {
                        appendToTerminal(`Error: ${error}`);
                    });
            });

            // Function to append text to the terminal output
            function appendToTerminal(text) {
                const terminal = document.getElementById('terminalOutput');
                // Replace newlines with <br> for HTML display
                const formattedText = text.replace(/\n/g, '<br />');
                terminal.innerHTML += `<div>${formattedText}</div>`;
                // Auto-scroll to the bottom
                terminal.scrollTop = terminal.scrollHeight;
            }
        });
    </script>

    <!-- Anti-Forgery Token -->
    <form id="antiForgeryForm" method="post" style="display: none;">
        @Html.AntiForgeryToken()
    </form>
</body>

</html>